{"ast":null,"code":"var _jsxFileName = \"/Users/jeongsejin/Desktop/dev/s3939906-s4002970-a2/React/src/context/AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n// create Provider\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState(null); // a user who is logined.\n  const [userListData, setUserListData] = useState([]); // all users who are signed up in our store.\n\n  console.log(`userData => ${JSON.stringify(userData)}`);\n  useEffect(() => {\n    const loginName = localStorage.getItem('loginName');\n    const loginEmail = localStorage.getItem('loginEmail');\n    const loginPW = localStorage.getItem('loginPW');\n    const address = localStorage.getItem('address');\n    const singUpDate = localStorage.getItem('signUpDate');\n    const preference = localStorage.getItem('preference');\n    const dietProfile = localStorage.getItem('dietProfile');\n    const dietPlan = localStorage.getItem('dietPlan');\n    const imgUrl = localStorage.getItem('imgUrl');\n    if (loginEmail && loginPW) {\n      // If user information exists in local storage, set the user as logged in.\n      setUserData({\n        name: loginName,\n        email: loginEmail,\n        password: loginPW,\n        address: address,\n        date: singUpDate,\n        preference: preference,\n        dietProfile: JSON.parse(dietProfile),\n        dietPlan: JSON.parse(dietPlan),\n        imgUrl\n      });\n    }\n  }, []);\n\n  // save userDataList\n  const signUp = data => {\n    setUserListData([...userListData, data]);\n    localStorage.setItem('userDataList', userListData);\n  };\n\n  // Account deletion\n  const handleDeleteUser = user => {\n    // 1. delete user in user list\n    const newUserList = userListData.filter(data => data.email !== user.email);\n    setUserListData([...newUserList]);\n    // make logout the user who is deleted\n    setUserData(null);\n    // go back to home\n    navigate('/');\n  };\n\n  // save user info who are logged in\n  const logIn = userInfo => {\n    setUserData(userInfo);\n    localStorage.setItem('loginName', userInfo.name);\n    localStorage.setItem('loginEmail', userInfo.email);\n    localStorage.setItem('loginPW', userInfo.password);\n    localStorage.setItem('address', userInfo.address);\n    localStorage.setItem('signUpDate', userInfo.date);\n    localStorage.setItem('preference', userInfo.preference);\n    localStorage.getItem('dietProfile', userInfo.dietProfile);\n    localStorage.getItem('dietPlan', userInfo.dietPlan);\n    localStorage.getItem('imgUrl', userInfo === null || userInfo === void 0 ? void 0 : userInfo.imgUrl);\n  };\n  const logOut = () => {\n    setUserData(null);\n    localStorage.removeItem('loginName');\n    localStorage.removeItem('loginEmail');\n    localStorage.removeItem('loginPW');\n    localStorage.removeItem('address');\n    localStorage.removeItem('signUpDate');\n    localStorage.removeItem('preference');\n    localStorage.removeItem('dietProfile');\n    localStorage.removeItem('dietPlan');\n  };\n  const savePreference = (preference, email) => {\n    const updatedUserDataList = userListData.map(user => {\n      if (user.email === email) {\n        return {\n          ...user,\n          preference: preference\n        };\n      } else {\n        return user;\n      }\n    });\n    // Update the state or wherever userListData is stored\n    setUserListData(updatedUserDataList);\n    setUserData({\n      ...userData,\n      preference: preference\n    });\n    localStorage.setItem('preference', preference);\n  };\n  const saveDietProfile = (profileInfo, email, dietPlan) => {\n    console.log(profileInfo);\n    // 1. 받아온 profileInfo를 userData에 저장하기, localSotrage도 같이\n    // 2. DietPlan에서 profileInfo가 있다면 그에 맞는 다이어트 계획 DB를 가진 컴포넌트를 보여준다.(\"글자로 거르기??\")\n    const updatedUserDataList = userListData.map(user => {\n      if (user.email === email) {\n        return {\n          ...user,\n          dietProfile: {\n            ...profileInfo\n          },\n          dietPlan: [...dietPlan]\n        };\n      } else {\n        return user;\n      }\n    });\n    // Update the state or wherever userListData is stored\n    setUserListData(updatedUserDataList);\n    setUserData({\n      ...userData,\n      dietProfile: {\n        ...profileInfo\n      },\n      dietPlan: [...dietPlan]\n    });\n    localStorage.setItem('dietProfile', JSON.stringify(profileInfo));\n    localStorage.setItem('dietPlan', JSON.stringify(dietPlan));\n  };\n  return (\n    /*#__PURE__*/\n    // provide user info to children so that they can use userInfo whenever they want without prop drilling.\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        userData,\n        userListData,\n        signUp,\n        logIn,\n        logOut,\n        savePreference,\n        handleDeleteUser,\n        setUserData,\n        setUserListData,\n        saveDietProfile\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Custom hook for using context\n_s(AuthProvider, \"7JFE4DlW3LptSg3NgS9iV3hxwn4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","userData","setUserData","userListData","setUserListData","console","log","JSON","stringify","loginName","localStorage","getItem","loginEmail","loginPW","address","singUpDate","preference","dietProfile","dietPlan","imgUrl","name","email","password","date","parse","signUp","data","setItem","handleDeleteUser","user","newUserList","filter","logIn","userInfo","logOut","removeItem","savePreference","updatedUserDataList","map","saveDietProfile","profileInfo","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/jeongsejin/Desktop/dev/s3939906-s4002970-a2/React/src/context/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// create Context\nconst AuthContext = createContext();\n// create Provider\nexport const AuthProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState(null); // a user who is logined.\n  const [userListData, setUserListData] = useState([]); // all users who are signed up in our store.\n\n  console.log(`userData => ${JSON.stringify(userData)}`);\n\n  useEffect(() => {\n    const loginName = localStorage.getItem('loginName');\n    const loginEmail = localStorage.getItem('loginEmail');\n    const loginPW = localStorage.getItem('loginPW');\n    const address = localStorage.getItem('address');\n    const singUpDate = localStorage.getItem('signUpDate');\n\n    const preference = localStorage.getItem('preference');\n    const dietProfile = localStorage.getItem('dietProfile');\n    const dietPlan = localStorage.getItem('dietPlan');\n    const imgUrl = localStorage.getItem('imgUrl');\n\n    if (loginEmail && loginPW) {\n      // If user information exists in local storage, set the user as logged in.\n      setUserData({\n        name: loginName,\n        email: loginEmail,\n        password: loginPW,\n        address: address,\n        date: singUpDate,\n        preference: preference,\n        dietProfile: JSON.parse(dietProfile),\n        dietPlan: JSON.parse(dietPlan),\n        imgUrl,\n      });\n    }\n  }, []);\n\n  // save userDataList\n  const signUp = (data) => {\n    setUserListData([...userListData, data]);\n    localStorage.setItem('userDataList', userListData);\n  };\n\n  // Account deletion\n  const handleDeleteUser = (user) => {\n    // 1. delete user in user list\n    const newUserList = userListData.filter(\n      (data) => data.email !== user.email\n    );\n    setUserListData([...newUserList]);\n    // make logout the user who is deleted\n    setUserData(null);\n    // go back to home\n    navigate('/');\n  };\n\n  // save user info who are logged in\n  const logIn = (userInfo) => {\n    setUserData(userInfo);\n    localStorage.setItem('loginName', userInfo.name);\n    localStorage.setItem('loginEmail', userInfo.email);\n    localStorage.setItem('loginPW', userInfo.password);\n    localStorage.setItem('address', userInfo.address);\n    localStorage.setItem('signUpDate', userInfo.date);\n    localStorage.setItem('preference', userInfo.preference);\n    localStorage.getItem('dietProfile', userInfo.dietProfile);\n    localStorage.getItem('dietPlan', userInfo.dietPlan);\n    localStorage.getItem('imgUrl', userInfo?.imgUrl);\n  };\n\n  const logOut = () => {\n    setUserData(null);\n    localStorage.removeItem('loginName');\n    localStorage.removeItem('loginEmail');\n    localStorage.removeItem('loginPW');\n    localStorage.removeItem('address');\n    localStorage.removeItem('signUpDate');\n    localStorage.removeItem('preference');\n    localStorage.removeItem('dietProfile');\n    localStorage.removeItem('dietPlan');\n  };\n\n  const savePreference = (preference, email) => {\n    const updatedUserDataList = userListData.map((user) => {\n      if (user.email === email) {\n        return { ...user, preference: preference };\n      } else {\n        return user;\n      }\n    });\n    // Update the state or wherever userListData is stored\n    setUserListData(updatedUserDataList);\n    setUserData({ ...userData, preference: preference });\n    localStorage.setItem('preference', preference);\n  };\n\n  const saveDietProfile = (profileInfo, email, dietPlan) => {\n    console.log(profileInfo);\n    // 1. 받아온 profileInfo를 userData에 저장하기, localSotrage도 같이\n    // 2. DietPlan에서 profileInfo가 있다면 그에 맞는 다이어트 계획 DB를 가진 컴포넌트를 보여준다.(\"글자로 거르기??\")\n    const updatedUserDataList = userListData.map((user) => {\n      if (user.email === email) {\n        return {\n          ...user,\n          dietProfile: { ...profileInfo },\n          dietPlan: [...dietPlan],\n        };\n      } else {\n        return user;\n      }\n    });\n    // Update the state or wherever userListData is stored\n    setUserListData(updatedUserDataList);\n    setUserData({\n      ...userData,\n      dietProfile: { ...profileInfo },\n      dietPlan: [...dietPlan],\n    });\n    localStorage.setItem('dietProfile', JSON.stringify(profileInfo));\n    localStorage.setItem('dietPlan', JSON.stringify(dietPlan));\n  };\n  return (\n    // provide user info to children so that they can use userInfo whenever they want without prop drilling.\n    <AuthContext.Provider\n      value={{\n        userData,\n        userListData,\n        signUp,\n        logIn,\n        logOut,\n        savePreference,\n        handleDeleteUser,\n        setUserData,\n        setUserListData,\n        saveDietProfile,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using context\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}